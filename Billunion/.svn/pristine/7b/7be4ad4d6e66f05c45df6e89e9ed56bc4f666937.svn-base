//
//  NetworkClient.m
//  SoundTranslate
//
//  Created by Lucas on 16/8/15.
//  Copyright © 2016年 ZhongRuan. All rights reserved.
//

#import "FGNetworking.h"
#import "UserModel.h"
#import "ShareViewModel.h"

/** 保存所有网络请求的task */
static NSMutableArray *kRequestTasks;

/** 基础URL */
static NSString *kNetworkBaseUrl = @"";

/** 请求的超时时间 */
static NSTimeInterval kTimeoutInterval = 60.f;

/** GET请求设置缓存，Post请求不缓存 */
//static BOOL FG_cacheGet  = YES;
//static BOOL FG_CachePost = NO;

/** 最大并行数 */
static NSInteger maxConcurrentCount = 3;

@implementation FGNetworking

//+ (NSString *)cookieValueWithKey:(NSString *)key
//{
//    NSHTTPCookieStorage *sharedHTTPCookieStorage = [NSHTTPCookieStorage sharedHTTPCookieStorage];
//    
//    if ([sharedHTTPCookieStorage cookieAcceptPolicy] != NSHTTPCookieAcceptPolicyAlways) {
//        [[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookieAcceptPolicy:NSHTTPCookieAcceptPolicyAlways];
//    }
//    
//    NSArray         *cookies = [sharedHTTPCookieStorage cookiesForURL:[NSURL URLWithString:@"http://192...."]];
//    NSEnumerator    *enumerator = [cookies objectEnumerator];
//    NSHTTPCookie    *cookie;
//    while (cookie = [enumerator nextObject]) {
//        if ([[cookie name] isEqualToString:key]) {
//            return [NSString stringWithString:[[cookie value] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
//        }
//    }
//    
//    return nil;
//}
//
//- (void)blockPostPath:(NSString *)path
//parameters:(NSDictionary *)parameters
//success:(void (^)(AFHTTPRequestOperation *operation, id responseObject))success
//failure:(void (^)(AFHTTPRequestOperation *operation, NSError *error))failure
//{
//    if (!path) {
//        path = @"";
//    }
//    NSArray *arcCookies = [NSKeyedUnarchiver unarchiveObjectWithData: [[NSUserDefaults standardUserDefaults] objectForKey: @"sessionCookies"]];
//    NSHTTPCookieStorage *cookieStorage = [NSHTTPCookieStorage sharedHTTPCookieStorage];
//    
//    for (NSHTTPCookie *cookie in arcCookies){
//        [cookieStorage setCookie: cookie];
//    }
//    
//    NSURL *dataUrl = [NSURL URLWithString:path relativeToURL:self.baseURL];
//    NSArray *cookies = [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookiesForURL:dataUrl];//id: NSHTTPCookie
//    NSDictionary *sheaders = [NSHTTPCookie requestHeaderFieldsWithCookies:cookies];
//    
//    NSString *charset = (NSString *)CFStringConvertEncodingToIANACharSetName(CFStringConvertNSStringEncodingToEncoding(NSUTF8StringEncoding));
//    
//    __strong NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:dataUrl cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:60.f];
//    
//    [request setHTTPMethod:@"Post"];
//    [request addValue:@"iOS" forHTTPHeaderField:@"User-Agent"];
//    [request setValue:[NSString stringWithFormat:@"application/x-www-form-urlencoded; charset=%@", charset] forHTTPHeaderField:@"Content-Type"];
//    //    [request setHTTPBody:[AFQueryStringFromParametersWithEncoding(parameters, NSUTF8StringEncoding) dataUsingEncoding:NSUTF8StringEncoding]];
//    [request setAllHTTPHeaderFields:sheaders];
//    
//    if (parameters) {
//        NSString *charset = (__bridge NSString *)CFStringConvertEncodingToIANACharSetName(CFStringConvertNSStringEncodingToEncoding(self.stringEncoding));
//        NSError *error = nil;
//        
//        switch (self.parameterEncoding) {
//            case AFFormURLParameterEncoding:;
//                [request setValue:[NSString stringWithFormat:@"application/x-www-form-urlencoded; charset=%@", charset] forHTTPHeaderField:@"Content-Type"];
//                [request setHTTPBody:[AFQueryStringFromParametersWithEncoding(parameters, self.stringEncoding) dataUsingEncoding:self.stringEncoding]];
//                break;
//            case AFJSONParameterEncoding:;
//                [request setValue:[NSString stringWithFormat:@"application/json; charset=%@", charset] forHTTPHeaderField:@"Content-Type"];
//                [request setHTTPBody:[NSJSONSerialization dataWithJSONObject:parameters options:0 error:&error]];
//                break;
//            case AFPropertyListParameterEncoding:;
//                [request setValue:[NSString stringWithFormat:@"application/x-plist; charset=%@", charset] forHTTPHeaderField:@"Content-Type"];
//                [request setHTTPBody:[NSPropertyListSerialization dataWithPropertyList:parameters format:NSPropertyListXMLFormat_v1_0 options:0 error:&error]];
//                break;
//        }
//        
//        if (error) {
//            NSLog(@"%@ %@: %@", [self class], NSStringFromSelector(_cmd), error);
//        }
//        
//    }
//    
//    AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithRequest:request success:success failure:failure];
//    [self enqueueHTTPRequestOperation:operation];
//    
//}




//NSString *pathStr=@"http://www.baidu.com" ;
//
//AFHTTPClient *httpClient = [[AFHTTPClient alloc] initWithBaseURL:[NSURL URLWithString:@""]];//这里要将url设置为空
//
//httpClient.parameterEncoding = AFJSONParameterEncoding;
//
//[httpClient setDefaultHeader:@"Accept" value:@"text/json"];
//
//
//NSMutableDictionary *params=[[NSMutableDictionary alloc] init];   // 要传递的json数据是一个字典
//
//[params setObject:UserID forKey:@"userId"];
//
//[params setObject:[self.contDic objectForKey:@"weiboId" ] forKey:@"operateId"];
//
//[params setObject:@"8d0ce196d0eafa27780cc3a7217de71d92474021dc0a4fc593d4f9b9eda320ca" forKey:@"key"];
//
//
//
//// httpClient 的postPath就是上文中的pathStr，即你要访问的URL地址，这里是向服务器提交一个数据请求，
//
//[httpClient postPath:pathStr parameters:params success:^(AFHTTPRequestOperation *operation, id responseObject) {
//    
//    NSLog(@"data====%@",params);
//    
//    NSString *responseStr = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];
//    
//    NSLog(@"Request Successful, response '%@'", responseStr);
//    
//    [responseStr release];
//    
//} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
//    
//    NSLog(@"[HTTPClient Error]: %@", error);
//}
// 
//    

+ (void)requsetWithPath:(NSString *)path
                 params:(NSDictionary *)params
                 method:(HttpMethod)mothod
            handleBlcok:(void (^)(id response, NSError *error))block
{
    path = [NSString stringWithFormat:@"%@%@",BASEURL,path];
//    NSLog(@"request URL：%@",path);
    
    if ([path length] <= 0 || nil == path) return;
    AFHTTPSessionManager *manager = [FGNetworking manager];
//    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    
    if (mothod == Post) {

      UserModel *model =  [[UserModel findAll] lastObject];
        NSString *sessionId= [NSString stringWithFormat:@";jsessionid=%@",model.SessionId];
        path = [NSString stringWithFormat:@"%@%@",path,sessionId];

     //   NSLog(@"SessionId:%@",model.Sessi∫onId);
     //   NSLog(@"Cookie:%@", [[manager.requestSerializer HTTPRequestHeaders] objectForKey:@"Cookie"]);
        
        //        [manager.requestSerializer.]
//        [manager.requestSerializer setValue:@"ios" forHTTPHeaderField:@"User-Agent"];
//        [manager.requestSerializer setValue:@"application/x-www-form-urlencoded"forHTTPHeaderField:@"Content-Type"];
    }
//    manager.requestSerializer = [AFJSONRequestSerializer serializer];
    
    [path stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
    NSURLSessionTask *sessionTask = nil;
    
    switch (mothod) {
        case Get:
        {
            sessionTask = [manager GET:path parameters:params progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
                [[self allTasks] removeObject:task];
                if (block) {
                    block(responseObject, nil)  ;
                }
            } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
                [[self allTasks] removeObject:task];
                if (block) {
                    block(nil, error);
                }
            }];
        }
            break;
        case Post:
        {
            sessionTask = [manager POST:path parameters:params progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
                [[self allTasks] removeObject:task];
                if (block) {
                    block(responseObject, nil);
                }
            } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
                [[self allTasks] removeObject:task];
                if (block) {
                    block(nil, error);
                }
            }];
        }
            break;
        case Delete:
        {
            sessionTask = [manager DELETE:path parameters:params success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
                [[self allTasks] removeObject:task];
                if (block) {
                    block(responseObject, nil);
                }
            } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
                [[self allTasks] removeObject:task];
                if (block) {
                    block(nil, error);
                }
            }];
        }
            break;
        case Put:
        {
            sessionTask = [manager PUT:path parameters:params success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
                [[self allTasks] removeObject:task];
                if (block) {
                    block(responseObject, nil);
                }
            } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
                [[self allTasks] removeObject:task];
                if (block) {
                    block(nil, error);
                }
            }];
        }
            break;
        default:
            break;
    }
    
    if (sessionTask) {
        [[FGNetworking allTasks] addObject:sessionTask];
    }
}

+ (void)uploadImage:(UIImage *)image
               path:(NSString *)path
               imageName:(NSString *)imageName
             params:(NSDictionary *)params
           progress:(void (^)(CGFloat progressValue))progress
            success:(void (^)(id response))success
            failure:(void (^)(NSError *error))failure
{
    UserModel *model =  [[UserModel findAll] lastObject];
    NSString *sessionId= [NSString stringWithFormat:@";jsessionid=%@",model.SessionId];
    path = [NSString stringWithFormat:@"%@%@",BASEURL,path];
    path = [NSString stringWithFormat:@"%@%@",path,sessionId];

    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"application/json",
                                                         @"text/html",
                                                         @"image/jpeg",
                                                         @"image/png",
                                                         @"application/octet-stream",
                                                         @"text/json",
                                                         nil];
    DEBUGLOG(@"%@ \n %@",path,params);
    NSURLSessionDataTask *task = [manager POST:path parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {

        NSData *imageDatas0 = UIImageJPEGRepresentation(image,1);
//        float kCompressionQuality  = 0.5/(imageDatas.length/1000.0/1000.0);
//         imageDatas = UIImageJPEGRepresentation(image,kCompressionQuality);
        
        UIImage*compressImage = [self compressImage:image toMaxFileSize:1000.0];
        NSData *imageDatas = UIImageJPEGRepresentation(compressImage,1);
        NSLog(@"上传图片大小: %lf -- %lf",imageDatas0.length/1000.0/1000.0,imageDatas.length/1000.0/1000.0);
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        formatter.dateFormat = @"yyyyMMddHHmmss";
        NSString *str = [formatter stringFromDate:[NSDate date]];
        NSString *fileName = [NSString stringWithFormat:@"%@.jpg", str];
        //上传的参数(上传图片，以文件流的格式)
        [formData appendPartWithFileData:imageDatas
                                    name:imageName
                                fileName:fileName
                                mimeType:@"image/jpeg"];
    } progress:^(NSProgress * _Nonnull uploadProgress) {
        NSLog(@"%@ \n %lf",path,uploadProgress.fractionCompleted);
        progress(uploadProgress.fractionCompleted);
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        DEBUGLOG(@"%@ \n %@",path,responseObject);
        success(responseObject);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        DEBUGLOG(@"%@ \n %@",path,error.description);
        failure(error);
    }];

    [task resume];

}

+ (UIImage *)compressImage:(UIImage *)image toMaxFileSize:(NSInteger)maxFileSize {
    CGFloat compression = 0.9f;
    CGFloat maxCompression = 0.1f;
    NSData *imageData = UIImageJPEGRepresentation(image, compression);
    while ([imageData length] > maxFileSize && compression > maxCompression) {
        compression -= 0.1;
        imageData = UIImageJPEGRepresentation(image, compression);
    }
    
    UIImage *compressedImage = [UIImage imageWithData:imageData];
    return compressedImage;
}


#pragma mark - Private
+ (AFHTTPSessionManager *)manager
{
    AFHTTPSessionManager *manager = nil;;
    if ([self baseUrl] != nil) {
        manager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:[self baseUrl]]];
    } else {
        manager = [AFHTTPSessionManager manager];
    }
    manager.requestSerializer = [AFJSONRequestSerializer serializer];
     manager.responseSerializer = [AFJSONResponseSerializer serializer];
    manager.requestSerializer.stringEncoding = NSUTF8StringEncoding;
    manager.responseSerializer.acceptableContentTypes =
            [NSSet setWithArray:@[@"application/json",
                                  @"text/html",
                                  @"text/json",
                                  @"text/plain",
                                  @"text/javascript",
                                  @"text/xml",
                                  @"image/*"]];
    [manager.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    manager.requestSerializer.timeoutInterval = kTimeoutInterval;
    
    // 设置允许同时最大并发数量，过大容易出问题
    manager.operationQueue.maxConcurrentOperationCount = maxConcurrentCount;
    return manager;
}

+ (NSString *)baseUrl
{
    return kNetworkBaseUrl;
}

+ (void)updateBaseUrl:(NSString *)baseUrl {
    kNetworkBaseUrl = baseUrl;
}

+ (NSMutableArray *)allTasks {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        if (nil == kRequestTasks ) {
            kRequestTasks = @[].mutableCopy;
        }
    });
    
    return kRequestTasks;
}




+ (void)cancelAllRequest
{
    @synchronized(self) {
        [[self allTasks] enumerateObjectsUsingBlock:^(NSURLSessionTask * _Nonnull task, NSUInteger idx, BOOL * _Nonnull stop) {
            if ([task isKindOfClass:[NSURLSessionTask class]]) {
                [task cancel];
            }
        }];
        
        [[self allTasks] removeAllObjects];
    };
}

+ (void)cancelRequestWithURL:(NSString *)url
{
    if (nil == url) {
        return;
    }
    
    @synchronized(self) {
        [[self allTasks] enumerateObjectsUsingBlock:^(NSURLSessionTask * _Nonnull task, NSUInteger idx, BOOL * _Nonnull stop) {
            if ([task isKindOfClass:[NSURLSessionTask class]] &&
                [task.currentRequest.URL.absoluteString hasSuffix:url])
            {
                [task cancel];
                [[self allTasks] removeObject:task];
                return;
            }
        }];
    };
}



+ (void)requsetJsonWithPath:(NSString *)path
                 params:(NSDictionary *)params
                   progress:(void (^)(CGFloat progressValue))progress
                    success:(void (^)(id response))success
                    failure:(void (^)(NSError *error))failure
            handleBlcok:(void (^)(id response, NSError *error))block{

    NSURLSessionTask *sessionTask =
    [[FGNetworking manager] POST:path parameters:params constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        
        
        
        /*
        NSData *imageData = UIImageJPEGRepresentation(image, 1);
        NSString *imageFileName = filename;
        if (filename == nil || ![filename isKindOfClass:[NSString class]] || filename.length == 0) {
            NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
            formatter.dateFormat = @"yyyyMMddHHmmss";
            NSString *str = [formatter stringFromDate:[NSDate date]];
            imageFileName = [NSString stringWithFormat:@"%@.jpg", str];
        }
        
         上传图片，以文件流的格式
        [formData appendPartWithFileData:imageData name:name fileName:imageFileName mimeType:@"image/jpeg"];
         */
        
    } progress:^(NSProgress * _Nonnull uploadProgress) {
        if (progress) {
            progress((CGFloat)uploadProgress.completedUnitCount / (CGFloat)uploadProgress.totalUnitCount);
        }
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        [[FGNetworking allTasks] removeObject:task];
        if (success) {
            success(responseObject);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        [[self allTasks] removeObject:task];
        if (failure) {
            failure(error);
        }
    }];
    [sessionTask resume];
    
    if (sessionTask) {
        [[FGNetworking allTasks] addObject:sessionTask];
    }
}
@end
