//
//  MapViewController.m
//  Billunion
//
//  Created by QT on 17/1/9.
//  Copyright © 2017年 JM. All rights reserved.
//

#import "MapViewController.h"
#import "MapInfoView.h"
#import "BuyerInfoViewController.h"
#import "MapModel.h"

#import <MAMapKit/MAMapKit.h>
#import <AMapFoundationKit/AMapFoundationKit.h>
#import <AMapLocationKit/AMapLocationKit.h>
#import <AMapNaviKit/AMapNaviKit.h>
#import <CoreLocation/CoreLocation.h>

#import "CalloutMapAnnotation.h"
#import "CustomPointAnnotation.h"
#import "CallOutAnnotationView.h"
#import "CalloutView.h"

#import "BaseMapView.h"

#define DefaultLocationTimeout  6

@interface MapViewController ()<MAMapViewDelegate, AMapLocationManagerDelegate,
AMapNaviDriveManagerDelegate,AMapNaviDriveViewDelegate>
{
    CalloutMapAnnotation *_calloutMapAnnotation;
}

@property (nonatomic, strong) BaseMapView *mapView;
/** 定位 */
@property (nonatomic, strong) AMapLocationManager *locationManager;
/** 导航管理器 */
@property (nonatomic, strong) AMapNaviDriveManager *driveManager;

/** 用户的位置点 */
@property (nonatomic,strong) CustomPointAnnotation *userAnnotation;
/** 目标位置点 */
@property (nonatomic,strong) CustomPointAnnotation *destinationAnnotation;
/** 下面展示询价方跟贴现率的view */
@property (nonatomic,strong) MapInfoView *infoView;
/** 目的地 */
//@property (nonatomic,strong)AMapNaviRoute *destinationRoute;

/** 存储 地图上所有的点 */
@property (nonatomic,strong) NSMutableArray *annotations;

/** 存储所有的模型，用于infoView的显示 */
@property (nonatomic,strong)  NSMutableArray  *infoViewDatas;

@end

@implementation MapViewController

#pragma mark - 生命周期

- (void)viewDidLoad {
    [super viewDidLoad];
    [self setupBakcButton];
    self.title = @"票源距离";
    [self.view addSubview:self.mapView];
    [self initMapView];
    [self loadData];
}

-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear: animated];
    [self.locationManager setDelegate:self];
    [[BaseMapView shareMapView] setDelegate:self];
    [self.driveManager setDelegate:self];
    [self.mapView addAnnotation:self.userAnnotation];
    if (self.destinationAnnotation) {
        [self.mapView showAnnotations:@[self.destinationAnnotation] edgePadding:UIEdgeInsetsMake(50,50,150,50)animated:YES];
    }else if(self.userAnnotation){
        [self.mapView showAnnotations:@[self.userAnnotation] edgePadding:UIEdgeInsetsMake(50,50,150,50)animated:YES];
    }
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
}

-(void)dealloc{
    NSLog(@"%s",__func__);
    [self.mapView removeOverlays:self.mapView.overlays];
    [self.mapView removeAnnotations:self.mapView.annotations];
    [self.locationManager stopUpdatingLocation];
    [self.driveManager stopNavi];
    [self.locationManager setDelegate:nil];
    [self.driveManager setDelegate:nil];
    [self.mapView setDelegate:nil];

    [self.view.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
    self.mapView = nil;
}

-(void)loadData{
    [self test];
    for (int i=0; i<self.dataArray.count; i++) {
        [self geoCodeWithMapModel:self.dataArray[i] ];
    }
}

-(NSMutableArray *)dataArray
{
    if (!_dataArray) {
        _dataArray = [NSMutableArray array];
    }
    return _dataArray;
}

-(void)test{

    NSArray *adds = @[@"甘肃省兰州市天水南路222号",@"湖北省武汉市武昌区八一路299号",
                      @"广西南宁市西乡塘区大学东路100号",@"广西壮族自治区桂林市桂林电子科技大学",
                      @"北京市海淀区颐和园路5号",@"天津南开区卫津路94号",
                      @"北京市海淀区双清路30号",@"上海市徐汇区医学院路138号",
                      @"浙江省杭州市西湖区余杭塘路866号",@"上海市杨浦区四平路同济大学",
                      @"上海市徐汇区华山路1804号",@"上海市宝山区上大路99号",
                      @"江苏省南京市鼓楼区汉口路22号",@"江苏省南京市孝陵卫200号",
                      @"广州市广州大学城外环西路230号",@"广东省深圳市南山区南海大道3688号",
                      @"广东省深圳宝安国际机场",@"广州市海珠区阅江西路222号"
                      ];
//    NSArray *arr = @[@"icons_header_other1",@"icons_header_other2",@"icons_header_other3"];
    for (int i = 0; i< adds.count ; i++) {
        MapModel *m = [[MapModel alloc]init];
        m.Amount = @(arc4random() % 2000000 );
        m.DiscountRate = @( arc4random_uniform(20) + 0.5 );
        m.Remarks = adds[i];
        m.CompanyName = [NSString stringWithFormat:@"测试公司%d",i];
        m.isUser = NO;
        m.imageName = [self getImageNameWithMapModel:m];
        [self.dataArray addObject:m];
    }
}

-(NSString *)getImageNameWithMapModel:(MapModel*)mapModel{
    double amount = mapModel.Amount.doubleValue;
    if (amount > 0 && amount < 1000000) {
        return @"icons_header_other3";
    }else if (amount >= 1000000 && amount < 2000000){
        return @"icons_header_other2";
    }else if (amount >= 2000000 && amount < 3000000){
        return @"icons_header_other1";
    }
    
    if (mapModel.isUser) {
        return @"icons_header_other0";
    }
    return nil;
}

#pragma mark - 地理编码(地址关键字 ->经纬度 )
- (void)geoCodeWithMapModel:(MapModel*)mapModel{
    
    // 容错处理
    if([mapModel.Remarks length] == 0)
    {
        return;
    }
    CLGeocoder *cLGeocoder = [[CLGeocoder alloc] init];
    // 根据地址关键字, 进行地理编码
    __weak typeof(self) weakSelf = self;
    [cLGeocoder geocodeAddressString:mapModel.Remarks completionHandler:^(NSArray<CLPlacemark *> * _Nullable placemarks, NSError * _Nullable error) {
        
        CLPlacemark *pl = [placemarks firstObject];
        
        if(error == nil)
        {
            mapModel.location = pl.location;
            mapModel.imageName = [self getImageNameWithMapModel:mapModel];
            CustomPointAnnotation *annotation = [[CustomPointAnnotation alloc]
                                                 initWithCoordinate:pl.location.coordinate
                                                           mapModel:mapModel];
            if (mapModel.isUser) {
                // 是用户的 则不添加到数组里,记住即可
                weakSelf.userAnnotation = annotation;
            }else{
                [weakSelf.annotations addObject:annotation];
                [weakSelf.infoViewDatas addObject:mapModel];
                
                if (weakSelf.infoViewDatas.count >= 2) {
                    [weakSelf.infoViewDatas sortUsingComparator:^NSComparisonResult(MapModel *obj1, MapModel *obj2) {
                        return obj1.DiscountRate.floatValue > obj2.DiscountRate.floatValue;
                    }];
                }
                [weakSelf.infoView.tableView reloadData];
                
                if (weakSelf.infoViewDatas.firstObject == mapModel) {
                    weakSelf.destinationAnnotation = annotation;
                    /** 计算路线 */
                    [weakSelf calculateRouteWithUserAnnotation:annotation
                                         destinationAnnotation:weakSelf.destinationAnnotation];
                }

            }
           
            [weakSelf.mapView addAnnotation:annotation];
            [weakSelf.mapView showAnnotations:weakSelf.mapView.annotations
                                  edgePadding:UIEdgeInsetsMake(50,50,150,50) animated:YES];
            
            }else{
                NSLog(@"地址没找到，可能在月球上:%@ - %@",error,mapModel.Remarks);
        }
    }];
}

#pragma mark - 初始化地图和开始定位
- (void)initMapView
{
    if ([CLLocationManager authorizationStatus] == kCLAuthorizationStatusDenied) {
        [UIAlertController alertControllerWithTitle:@"提示" message:@"请打开定位功能,否则地图使用不了" okTitle:@"确定" cancelTtile:@"取消" target:self clickBlock:^(BOOL ok, BOOL cancel) {
            if (ok) {
                NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                if ([[UIApplication sharedApplication]canOpenURL:url]) {
                    [[UIApplication sharedApplication]openURL:url];
                }
            }
        }];
        return;
    }
 
    [self locationManager];
    [self initDriveManager];
     __weak typeof(self) weakSelf = self;
    [self.locationManager requestLocationWithReGeocode:YES completionBlock:^(CLLocation *location, AMapLocationReGeocode *regeocode, NSError *error) {
        
        [weakSelf.locationManager stopUpdatingLocation];
        MapModel *mapModel = [[MapModel alloc]init];
        mapModel.imageName = @"icons_header_mine0";
        mapModel.isUser = YES;
        if (error)
        {
            DEBUGLOG(@"定位错误:{%ld - %@};", (long)error.code, error.localizedDescription);
            mapModel.Remarks = [[NSUserDefaults standardUserDefaults] objectForKey:@"kDetailAddressName"];
            [weakSelf geoCodeWithMapModel:mapModel];
            
        }else if (location)
        {
            NSLog(@"定位结果==== %@",regeocode);
            
            mapModel.location = location;
            mapModel.Remarks = regeocode.formattedAddress;
            CustomPointAnnotation *annotation = [[CustomPointAnnotation alloc] initWithCoordinate:location.coordinate
                                                                                         mapModel:mapModel];
            weakSelf.userAnnotation = annotation;
            [weakSelf.mapView addAnnotation:annotation];
            [weakSelf.mapView showAnnotations:weakSelf.mapView.annotations
                                   edgePadding:UIEdgeInsetsMake(50,50,150,50)
                                      animated:YES];
            /** 计算路线 */
            [weakSelf calculateRouteWithUserAnnotation:annotation
                                 destinationAnnotation:weakSelf.destinationAnnotation];
        }

    }];
    
}

#pragma  mark - 懒加载
-(AMapLocationManager *)locationManager
{
    if (!_locationManager) {
        _locationManager = [[AMapLocationManager alloc] init];
        [_locationManager setDesiredAccuracy:kCLLocationAccuracyHundredMeters];
        [_locationManager setPausesLocationUpdatesAutomatically:NO];
        [_locationManager setLocationTimeout:DefaultLocationTimeout];
    }
    return _locationManager;
}

-(BaseMapView *)mapView
{
    return [BaseMapView shareMapView];
}

-(NSMutableArray *)annotations
{
    if (!_annotations) {
        _annotations = [NSMutableArray array];
    }
    return _annotations;
}
-(NSMutableArray *)infoViewDatas
{
    if (!_infoViewDatas) {
        _infoViewDatas = [NSMutableArray array];
    }
    return _infoViewDatas;
}

-(void)calculateRouteWithUserAnnotation:(CustomPointAnnotation *)userAnnotation destinationAnnotation:(CustomPointAnnotation *)destinationAnnotation
{
  
    [self.mapView selectAnnotation:self.destinationAnnotation animated:YES];
    AMapNaviPoint *startPoint = [AMapNaviPoint locationWithLatitude:userAnnotation.coordinate.latitude
                                                          longitude:userAnnotation.coordinate.longitude];
    AMapNaviPoint *endPoint   = [AMapNaviPoint locationWithLatitude:destinationAnnotation.coordinate.latitude
                                                          longitude:destinationAnnotation.coordinate.longitude];
    
    // 开始计算路径  成功的话则去调用代理方法
    [self.driveManager calculateDriveRouteWithStartPoints:@[startPoint]
                                                endPoints:@[endPoint]
                                                wayPoints:nil
                                          drivingStrategy:AMapNaviDrivingStrategySinglePrioritiseDistance];
}


- (void)initDriveManager
{
    if (self.driveManager == nil)
    {
        self.driveManager = [[AMapNaviDriveManager alloc] init];
        [self.driveManager setDelegate:self];
    }
}


#pragma mark - MAMapViewDelegate
/** 显示多个大头针 */
- (MAAnnotationView *)mapView:(MAMapView *)mapView viewForAnnotation:(id<MAAnnotation>)annotation
{
    
   
    if ([annotation isKindOfClass:[CustomPointAnnotation class]]) {
        static NSString *annotationIdentifier = @"customAnnotation";
        MAAnnotationView *annotationView = [mapView dequeueReusableAnnotationViewWithIdentifier:annotationIdentifier];
            if (annotationView ==nil)
            {
                annotationView = [[MAAnnotationView alloc]initWithAnnotation:annotation reuseIdentifier:annotationIdentifier];
                annotationView.calloutOffset = CGPointMake(0, -5);
                annotationView.canShowCallout = NO;       //设置气泡可以弹出，默认为NO
                annotationView.draggable = YES;        //设置标注可以拖动，默认为N
            }
        
        CustomPointAnnotation *point = (CustomPointAnnotation *)annotation;
        annotationView.image = [UIImage imageNamed:point.mapModel.imageName];
    
        return annotationView;
    }else if ([annotation isKindOfClass:[CalloutMapAnnotation class]]){
        static NSString *calloutviewIdentifier = @"calloutviewIdentifier";
        //此时annotation就是我们calloutview的annotation
        CalloutMapAnnotation *ann = (CalloutMapAnnotation*)annotation;
        
        //如果可以重用
        CallOutAnnotationView *calloutannotationview = (CallOutAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:calloutviewIdentifier];
        
        //否则创建新的calloutView
        if (!calloutannotationview) {
            calloutannotationview = [[CallOutAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:calloutviewIdentifier];
            
            BOOL isHaveDetail = NO;
            
            if(self.kLineType == KLine_buyerInquiry   ||
               self.kLineType == KLine_buyerSpecify   ||
               self.kLineType == KLine_sellerSpecify  ||
               self.kLineType == KLine_sellerInquiry  )
            {
                isHaveDetail = YES;
            }
            if (ann.mapModel.isUser) {
                isHaveDetail = NO;
            }
            
            CalloutView *calloutView = [[CalloutView alloc]initWithFrame:calloutannotationview.myContentView.frame isHaveDetail:isHaveDetail];
            [calloutView.maskBtn addTarget:self  action:@selector(didAnnotationViewCalloutTapped:)
                          forControlEvents:UIControlEventTouchUpInside];
            [calloutannotationview.myContentView addSubview:calloutView];
            calloutannotationview.calloutView = calloutView;
        }
        
        if(ann.mapModel.isUser){
            calloutannotationview.calloutView.titleLabel.text = @"您当前位于:";
            calloutannotationview.calloutView.amountLabel.text = ann.mapModel.Remarks;
        }else{
            calloutannotationview.calloutView.mapModel = ann.mapModel;
        }
        return calloutannotationview;
        
    }
    
    return nil;
    
}

#pragma mark - 点击大头针
-(void)infoViewDidSelectAnnotationView:(MAAnnotationView *)view{
    self.destinationAnnotation = (CustomPointAnnotation*)view.annotation;
    [self calculateRouteWithUserAnnotation:self.userAnnotation destinationAnnotation:self.destinationAnnotation];
    NSInteger index = self.infoViewDatas.count + 1;
    for (MapModel *mm in self.infoViewDatas) {
        if (mm == self.destinationAnnotation.mapModel ) {
            index = [self.infoViewDatas indexOfObject:mm];
            break;
        }
    }
    [self.infoView returnSelectedIndex:index];
}

- (void)mapView:(MAMapView *)mapView didSelectAnnotationView:(MAAnnotationView *)view
{
    NSLog(@"didSelectAnnotationView----------");
    
    if ([view.annotation isKindOfClass:[CustomPointAnnotation class]]) {
        
        //CustomPointAnnotation 是自定义的marker标注点，通过这个来得到添加marker时设置的model属性
        CustomPointAnnotation *annn = (CustomPointAnnotation*)view.annotation;
        if(annn != self.userAnnotation){  // 非用户的时候才计算并画出线路
           [self infoViewDidSelectAnnotationView:view];
        }
 
        //如果点到了这个marker点，什么也不做
        if (_calloutMapAnnotation.coordinate.latitude == view.annotation.coordinate.latitude &&
            _calloutMapAnnotation.coordinate.longitude == view.annotation.coordinate.longitude) {
            return;
        }
        //如果当前显示着calloutview，又触发了didSelectAnnotationView方法，删除这个calloutview annotation
        if (_calloutMapAnnotation) {
            [mapView removeAnnotation:_calloutMapAnnotation];
            _calloutMapAnnotation=nil;
            
        }
        //创建搭载自定义calloutview的annotation
        _calloutMapAnnotation = [[CalloutMapAnnotation alloc] initWithLatitude:view.annotation.coordinate.latitude andLongitude:view.annotation.coordinate.longitude] ;
        
        //把通过marker(ZNBCPointAnnotation)设置的pointCalloutInfo信息赋值给CalloutMapAnnotation
        _calloutMapAnnotation.mapModel = annn.mapModel;
        
        // 当添加的时候会调用 viewForAnnotation 方法
        if (annn.mapModel.isUser) { // 是用户的直接弹出，不是的则等待计算
            [mapView addAnnotation:_calloutMapAnnotation];
        }
        [mapView setCenterCoordinate:view.annotation.coordinate animated:YES];
    }
}


-(void)mapView:(MAMapView *)mapView didDeselectAnnotationView:(MAAnnotationView *)view{
    
    if (_calloutMapAnnotation&&![view isKindOfClass:[CallOutAnnotationView class]]) {
        
        if (_calloutMapAnnotation.coordinate.latitude == view.annotation.coordinate.latitude&&
            _calloutMapAnnotation.coordinate.longitude == view.annotation.coordinate.longitude) {
            [mapView removeAnnotation:_calloutMapAnnotation];
            _calloutMapAnnotation = nil;
        }
        
    }
    
}

#pragma mark - 弹出框点击方法
-(void)didAnnotationViewCalloutTapped:(UIButton *)btn{
    if ([btn.superview isKindOfClass:[CalloutView class]]) {
        CalloutView *calloutView = (CalloutView *)btn.superview;
        if (!calloutView.mapModel.isUser && calloutView.mapModel.CompanyId )
        {
            if(self.kLineType == KLine_buyerInquiry   ||
               self.kLineType == KLine_buyerSpecify   ||
               self.kLineType == KLine_sellerSpecify  ||
               self.kLineType == KLine_sellerInquiry  )
            {
                BuyerInfoViewController* vc = [[BuyerInfoViewController alloc]init];
                [vc.inquiryInfoVM setCurrentModel:calloutView.mapModel];
                [self.navigationController pushViewController:vc animated:YES];
            }
        }else{
            [self.view showWarning:@"您的公司ID不正确"];
        }
    }
    
}


#pragma mark -  绘制路线
/** 当驾车路线规划成功时，会进 driveManagerOnCalculateRouteSuccess 回调，在该回调函数中，可以进行规划路线显示也可以直接开启导航 */
- (void)driveManagerOnCalculateRouteSuccess:(AMapNaviDriveManager *)driveManager
{
    if ([self.driveManager.naviRoutes count] <= 0)
    {
        return;
    }
    
    [self.mapView removeOverlays:self.mapView.overlays];
    
    //将路径显示到地图上
    for (NSNumber *aRouteID in [self.driveManager.naviRoutes allKeys])
    {
        AMapNaviRoute *aRoute = [[self.driveManager naviRoutes] objectForKey:aRouteID];
//        self.destinationRoute = aRoute;
        int count = (int)[[aRoute routeCoordinates] count];
        NSLog(@"当前导航路径的信息: 长度：%ld-- 时间: %ld",aRoute.routeLength,aRoute.routeTime);
        
        //添加路径Polyline
        CLLocationCoordinate2D coords[count];
        
        for (int i = 0; i < count; i++)
        {
            AMapNaviPoint *coordinate = [[aRoute routeCoordinates] objectAtIndex:i];
            coords[i].latitude = [coordinate latitude];
            coords[i].longitude = [coordinate longitude];
        }
        
        MAPolyline *polyline = [MAPolyline polylineWithCoordinates:coords count:count];
        [self.mapView addOverlay:polyline];
        
         self.destinationAnnotation.mapModel.distanceStr = [NSString stringWithFormat:@"全程共: %.1lfkm   预计时间:%.1lfh",
                                                            aRoute.routeLength/1000.0,
                                                            aRoute.routeTime/3600.0];
        
    }
    
   // 当添加的时候会调用 viewForAnnotation 方法
    [self.mapView addAnnotation:_calloutMapAnnotation];
    if (self.destinationAnnotation) {
        [self.mapView showAnnotations:@[self.destinationAnnotation] edgePadding:UIEdgeInsetsMake(50,50,150,50)animated:YES];
    }
}

// 渲染路径
- (MAOverlayRenderer *)mapView:(MAMapView *)mapView rendererForOverlay:(id <MAOverlay>)overlay
{
    
    if ([overlay isKindOfClass:[MAPolyline class]])
    {
        MAPolylineRenderer *polylineRenderer = [[MAPolylineRenderer alloc] initWithPolyline:(MAPolyline*)overlay];
        polylineRenderer.strokeColor = [UIColor redColor];
        polylineRenderer.lineWidth   = 3.0f;
        polylineRenderer.lineJoinType = kMALineJoinRound;//连接类型
        return polylineRenderer;
    }
    
    return nil;
    
}

-(MapInfoView *)infoView
{
    if (!_infoView) {
        NSInteger count = (self.dataArray.count >= 3 ) ? 3 : self.dataArray.count;
        _infoView = [[MapInfoView alloc] initWithFrame:CGRectMake(0, self.view.height - 44*count,WIDTH, 44*count) dataArr:self.infoViewDatas];
        __weak typeof(self) weakSelf = self;
        _infoView.didSelectIndexBlock = ^(NSInteger index){
            MapModel *mm = weakSelf.infoViewDatas[index];
            NSInteger selectedIndex = weakSelf.annotations.count + 1;
            for (CustomPointAnnotation *anno in weakSelf.annotations) {
                if (anno.mapModel == mm) {
                    selectedIndex = [weakSelf.annotations indexOfObject:anno];
                    break;
                }
            }
            /** 找不出来 则不计算路线, 故上面设置selectedIndex为weakSelf.annotations.count + 1 */
            if (selectedIndex < weakSelf.annotations.count) {
                weakSelf.destinationAnnotation = weakSelf.annotations[selectedIndex];
                /** 计算路线 */
                [weakSelf calculateRouteWithUserAnnotation:weakSelf.userAnnotation destinationAnnotation:weakSelf.destinationAnnotation];
            }
        };
        // 添加信息View
        [self.view addSubview:_infoView];
        
    }
    return _infoView;
}


@end
