//
//  MapViewController.m
//  Billunion
//
//  Created by QT on 17/1/9.
//  Copyright © 2017年 JM. All rights reserved.
//

#import "MapViewController.h"
#import "QTAnnotation.h"
#import "MapInfoView.h"
#import "DistanceView.h"
#import "BuyerInfoViewController.h"
#import "MapModel.h"

#import <MAMapKit/MAMapKit.h>
#import <AMapFoundationKit/AMapFoundationKit.h>
#import <AMapLocationKit/AMapLocationKit.h>
#import <AMapNaviKit/AMapNaviKit.h>
#import <CoreLocation/CoreLocation.h>

#define DefaultLocationTimeout  6

@interface MapViewController ()<MAMapViewDelegate, AMapLocationManagerDelegate,
AMapNaviDriveManagerDelegate,AMapNaviDriveViewDelegate>

@property (nonatomic, strong) MAMapView *mapView;
/** 定位 */
@property (nonatomic, strong) AMapLocationManager *locationManager;
/** 导航管理器 */
@property (nonatomic, strong) AMapNaviDriveManager *driveManager;

/** 用户的位置点 */
@property (nonatomic,strong) QTAnnotation *userAnnotation;
/** 目标位置点 */
@property (nonatomic,strong) QTAnnotation *destinationAnnotation;
/** 下面展示询价方跟贴现率的view */
@property (nonatomic,strong) MapInfoView *infoView;
/** 距离跟耗时的View */
@property (nonatomic,strong) DistanceView *distanceView;

/** 目的地 */
@property (nonatomic,strong)AMapNaviRoute *destinationRoute;

/** 存储 地图上所有的点 */
@property (nonatomic,strong) NSMutableArray *annotations;

/** 存储所有的模型，用于infoView的显示 */
@property (nonatomic,strong)  NSMutableArray  *infoViewDatas;
@end

@implementation MapViewController

#pragma mark - 生命周期

- (void)viewDidLoad {
    [super viewDidLoad];
    [AMapServices sharedServices].apiKey = @"621bd5612c3b7735fd771f2152619a09";
    [self setupBakcButton];
    self.title = @"票源距离";
    [self initMapView];
    [self loadData];
}

-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear: animated];
    [self.locationManager setDelegate:self];
    [self.mapView setDelegate:self];
    [self.driveManager setDelegate:self];
    [self.mapView showAnnotations:self.mapView.annotations edgePadding:UIEdgeInsetsMake(50,20,150,20)animated:YES];
    [self.mapView addAnnotation:self.userAnnotation];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [self.locationManager stopUpdatingLocation];
    [self.driveManager stopNavi];
    [self.locationManager setDelegate:nil];
    [self.driveManager setDelegate:nil];
    [self.mapView setDelegate:nil];
}


-(void)loadData{
    
    for (int i=0; i<self.dataArray.count; i++) {
        [self geoCodeWithMapModel:self.dataArray[i]];
    }
}

#pragma mark - 初始化地图和开始定位
- (void)initMapView
{
    if ([CLLocationManager authorizationStatus] == kCLAuthorizationStatusDenied) {
        [UIAlertController alertControllerWithTitle:@"提示" message:@"请打开定位功能,否则地图使用不了" okTitle:@"确定" cancelTtile:@"取消" target:self clickBlock:^(BOOL ok, BOOL cancel) {
            if (ok) {
                NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                if ([[UIApplication sharedApplication]canOpenURL:url]) {
                    [[UIApplication sharedApplication]openURL:url];
                }
            }
        }];
        return;
    }
    [self locationManager];
    [self initDriveManager];
     __weak typeof(self) weakSelf = self;
    [self.locationManager requestLocationWithReGeocode:YES completionBlock:^(CLLocation *location, AMapLocationReGeocode *regeocode, NSError *error) {
        if (error)
        {
            DEBUGLOG(@"定位错误:{%ld - %@};", (long)error.code, error.localizedDescription);
        }else if (location)
        {
            NSLog(@"定位结果==== %@",regeocode);
            QTAnnotation *annotation = [[QTAnnotation alloc] initWithCoordinate:location.coordinate
                                                                          title:@"您当前位于:"
                                                                       subTitle:regeocode.formattedAddress
                                                                      imageName:@"icons_header_mine"];

             weakSelf.userAnnotation = annotation;
            [weakSelf.mapView addAnnotation:annotation];
             [weakSelf.mapView showAnnotations:weakSelf.mapView.annotations
                                   edgePadding:UIEdgeInsetsMake(50,20,150,20)
                                      animated:YES];
            /** 计算路线 */
            [weakSelf calculateRouteWithUserAnnotation:annotation destinationAnnotation:weakSelf.destinationAnnotation];
        }

    }];
    
}

-(AMapLocationManager *)locationManager
{
    if (!_locationManager) {
        _locationManager = [[AMapLocationManager alloc] init];
        [_locationManager setDesiredAccuracy:kCLLocationAccuracyHundredMeters];
        [_locationManager setPausesLocationUpdatesAutomatically:NO];
        [_locationManager setLocationTimeout:DefaultLocationTimeout];
    }
    return _locationManager;
}

-(MAMapView *)mapView
{
    if (!_mapView) {
        _mapView = [[MAMapView alloc] initWithFrame:CGRectMake(0, 64,
                                                               self.view.bounds.size.width,
                                                               self.view.bounds.size.height - 64)];
        
        [_mapView setDelegate:self];
        _mapView.rotateEnabled = NO;
        _mapView.mapType = MAMapTypeStandard;
        [self.view addSubview:_mapView];
    }
    return _mapView;
}

-(NSMutableArray *)annotations
{
    if (!_annotations) {
        _annotations = [NSMutableArray array];
    }
    return _annotations;
}
-(NSMutableArray *)infoViewDatas
{
    if (!_infoViewDatas) {
        _infoViewDatas = [NSMutableArray array];
    }
    return _infoViewDatas;
}

-(void)calculateRouteWithUserAnnotation:(QTAnnotation *)userAnnotation destinationAnnotation:(QTAnnotation *)destinationAnnotation
{
    [self.mapView selectAnnotation:self.destinationAnnotation animated:YES];
    AMapNaviPoint *startPoint = [AMapNaviPoint locationWithLatitude:userAnnotation.coordinate.latitude
                                                          longitude:userAnnotation.coordinate.longitude];
    AMapNaviPoint *endPoint   = [AMapNaviPoint locationWithLatitude:destinationAnnotation.coordinate.latitude
                                                          longitude:destinationAnnotation.coordinate.longitude];
    
    // 开始计算路径  成功的话则去调用代理方法
    [self.driveManager calculateDriveRouteWithStartPoints:@[startPoint]
                                                endPoints:@[endPoint]
                                                wayPoints:nil
                                          drivingStrategy:AMapNaviDrivingStrategySinglePrioritiseDistance];
}


- (void)initDriveManager
{
    if (self.driveManager == nil)
    {
        self.driveManager = [[AMapNaviDriveManager alloc] init];
        [self.driveManager setDelegate:self];
    }
}


#pragma mark - MAMapViewDelegate
/***  根据anntation生成对应的View */
- (MAAnnotationView *)mapView:(MAMapView *)mapView viewForAnnotation:(id<MAAnnotation>)annotation
{
    
    static NSString *customReuseIndetifier = @"customReuseIndetifier";
    MAAnnotationView *annotationView = [mapView dequeueReusableAnnotationViewWithIdentifier:customReuseIndetifier];
    if (annotationView ==nil)
    {
        
        annotationView = [[MAAnnotationView alloc]initWithAnnotation:annotation reuseIdentifier:customReuseIndetifier];
        annotationView.calloutOffset = CGPointMake(0, -5);
        annotationView.canShowCallout = YES;       //设置气泡可以弹出，默认为NO
        annotationView.draggable = YES;        //设置标注可以拖动，默认为N
    }
    
    //    这里我们遍历数组 拿到point 与地图上annotation上title比较  相同的话  设置图片为模拟数据的image
    for (QTAnnotation *point in self.annotations) {
        if ([[annotation title] isEqualToString:point.title]) {
            annotationView.image = [UIImage imageNamed:point.imageString];
        }
    }
    if (annotation == self.userAnnotation) {
        annotationView.image = [UIImage imageNamed:self.userAnnotation.imageString];
    }
    [self.mapView selectAnnotation:self.destinationAnnotation animated:YES];
    return annotationView;
}


#pragma mark - 点击大头针

-(void)mapView:(MAMapView *)mapView didSelectAnnotationView:(MAAnnotationView *)view
{
//    if ([[view.annotation title] isEqualToString:self.userAnnotation.title]) {
//        return;
//    }
    
    if ([view.annotation isKindOfClass:[QTAnnotation class]]) {
        self.destinationAnnotation = (QTAnnotation *)view.annotation;
        [self calculateRouteWithUserAnnotation:self.userAnnotation destinationAnnotation:self.destinationAnnotation];
        NSInteger index = self.infoViewDatas.count + 1;
        for (MapModel *mm in self.infoViewDatas) {
            if ([mm.Remarks isEqualToString:self.destinationAnnotation.title]) {
                index = [self.infoViewDatas indexOfObject:mm];
                break;
            }
        }
        [self.infoView returnSelectedIndex:index];
    }
}

#pragma mark - AMapNaviDriveManagerDelegate
/** 当驾车路线规划成功时，会进 driveManagerOnCalculateRouteSuccess 回调，在该回调函数中，可以进行规划路线显示也可以直接开启导航 */
- (void)driveManagerOnCalculateRouteSuccess:(AMapNaviDriveManager *)driveManager
{
    [self showNaviRoutes];
}
#pragma mark -  绘制路线
- (void)showNaviRoutes
{
    if ([self.driveManager.naviRoutes count] <= 0)
    {
        return;
    }
    
    [self.mapView removeOverlays:self.mapView.overlays];
    
    //将路径显示到地图上
    for (NSNumber *aRouteID in [self.driveManager.naviRoutes allKeys])
    {
        AMapNaviRoute *aRoute = [[self.driveManager naviRoutes] objectForKey:aRouteID];
        self.destinationRoute = aRoute;
        int count = (int)[[aRoute routeCoordinates] count];
        NSLog(@"当前导航路径的信息: 长度：%ld-- 时间: %ld",aRoute.routeLength,aRoute.routeTime);
        
        //添加路径Polyline
        CLLocationCoordinate2D coords[count];
        
        for (int i = 0; i < count; i++)
        {
            AMapNaviPoint *coordinate = [[aRoute routeCoordinates] objectAtIndex:i];
            coords[i].latitude = [coordinate latitude];
            coords[i].longitude = [coordinate longitude];
        }
        
        MAPolyline *polyline = [MAPolyline polylineWithCoordinates:coords count:count];
        [self.mapView addOverlay:polyline];
    }
    
    [self.mapView showAnnotations:self.mapView.annotations edgePadding:UIEdgeInsetsMake(50,20,150,20)animated:YES];
    
    /** 路程View */
    self.distanceView.origin = CGPointMake(self.view.centerX + 20, self.view.centerY + 20);
    NSString *dis = [NSString stringWithFormat:@"全程共: %.1lfkm",self.destinationRoute.routeLength/1000.0];
    NSString *hour = [NSString stringWithFormat:@"预计时间:%.1lfh",self.destinationRoute.routeTime/3600.0];
    [self.distanceView setDistanceViewWithDistance:dis hour:hour];
}

// 渲染路径
- (MAOverlayRenderer *)mapView:(MAMapView *)mapView rendererForOverlay:(id <MAOverlay>)overlay
{
    
    if ([overlay isKindOfClass:[MAPolyline class]])
    {
        MAPolylineRenderer *polylineRenderer = [[MAPolylineRenderer alloc] initWithPolyline:(MAPolyline*)overlay];
        polylineRenderer.strokeColor = [UIColor redColor];
        polylineRenderer.lineWidth   = 3.0f;
        polylineRenderer.lineJoinType = kMALineJoinRound;//连接类型
        return polylineRenderer;
    }
    
    return nil;
    
}



#pragma mark - 地理编码(地址关键字 ->经纬度 )
- (void)geoCodeWithMapModel:(MapModel*)mapModel {

    // 容错处理
    if([mapModel.Remarks length] == 0)
    {
        return;
    }
    CLGeocoder *cLGeocoder = [[CLGeocoder alloc] init];
    // 根据地址关键字, 进行地理编码
    __weak typeof(self) weakSelf = self;
    [cLGeocoder geocodeAddressString:mapModel.Remarks completionHandler:^(NSArray<CLPlacemark *> * _Nullable placemarks, NSError * _Nullable error) {
        
        CLPlacemark *pl = [placemarks firstObject];
        
        if(error == nil)
        {
            NSString *subTitle = [NSString stringWithFormat:@"金额(万):%.2f  贴现率:%.3f%%",
                                  mapModel.Amount.floatValue/10000.0,mapModel.DiscountRate.floatValue];
            QTAnnotation *annotation = [[QTAnnotation alloc] initWithCoordinate:pl.location.coordinate
                                                                          title:mapModel.Remarks
                                                                       subTitle:subTitle
                                                                      imageName:@"icons_header_other"];
       
            annotation.mapModel = mapModel;
            [weakSelf.annotations addObject:annotation];
            [weakSelf.mapView addAnnotation:annotation];
            [weakSelf.mapView showAnnotations:weakSelf.mapView.annotations edgePadding:UIEdgeInsetsMake(50,20,150,20) animated:YES];
        
            [weakSelf.infoViewDatas addObject:mapModel];
            
            if (weakSelf.infoViewDatas.count >= 2) {
                [weakSelf.infoViewDatas sortUsingComparator:^NSComparisonResult(MapModel *obj1, MapModel *obj2) {
                    return obj1.DiscountRate.floatValue > obj2.DiscountRate.floatValue;
                }];
            }
            [weakSelf.infoView.tableView reloadData];
            
            if (weakSelf.infoViewDatas.firstObject == mapModel) {
                weakSelf.destinationAnnotation = annotation;
                /** 计算路线 */
                [weakSelf calculateRouteWithUserAnnotation:annotation destinationAnnotation:weakSelf.destinationAnnotation];
            }
        }else{
            NSLog(@"地址没找到，可能在月球上:%@ - %@",error,mapModel.Remarks);
        }
    }];
}

-(MapInfoView *)infoView
{
    if (!_infoView) {
        NSInteger count = (self.dataArray.count >= 3 ) ? 3 : self.dataArray.count;
        _infoView = [[MapInfoView alloc] initWithFrame:CGRectMake(0, self.view.height - 44*count,WIDTH, 44*count) dataArr:self.infoViewDatas];
        __weak typeof(self) weakSelf = self;
        _infoView.didSelectIndexBlock = ^(NSInteger index){
            MapModel *mm = weakSelf.infoViewDatas[index];
            NSInteger selectedIndex = weakSelf.annotations.count + 1;
            for (QTAnnotation *aa in weakSelf.annotations) {
                if ([aa.title isEqualToString:mm.Remarks]) {
                    selectedIndex = [weakSelf.annotations indexOfObject:aa];
                    break;
                }
            }
            /** 找不出来 则不重新计算, 故上面设置selectedIndex为weakSelf.annotations.count + 1 */
            if (selectedIndex < weakSelf.annotations.count) {
                weakSelf.destinationAnnotation = weakSelf.annotations[selectedIndex];
                /** 计算路线 */
                [weakSelf calculateRouteWithUserAnnotation:weakSelf.userAnnotation destinationAnnotation:weakSelf.destinationAnnotation];
            }
        };
        // 添加信息View
        [self.view addSubview:_infoView];
        
    }
    return _infoView;
}



-(DistanceView *)distanceView
{
    if (!_distanceView) {
          _distanceView = [[DistanceView alloc]init];
         [self.view addSubview:_distanceView];
    }
    return _distanceView;
}

-(void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    UITouch * touch = [touches anyObject];
    CGPoint point = [touch locationInView:self.view];
    if (CGRectContainsPoint(self.distanceView.frame, point)) {
        self.distanceView.center = point;
    }
}

#pragma mark - 弹出框点击方法
/** 点击弹出框 进行跳转 */
- (void)mapView:(MAMapView *)mapView didAnnotationViewCalloutTapped:(MAAnnotationView *)view
{
    if ([view.annotation isKindOfClass:[QTAnnotation class]]) {
        QTAnnotation *anno = (QTAnnotation *)view.annotation;
        if (anno.mapModel != nil) {
            if( self.kLineType == KLine_buyerInquiry   || 
                self.kLineType == KLine_buyerSpecify   ||
                self.kLineType == KLine_sellerSpecify  ||
                self.kLineType == KLine_sellerInquiry  )
            {
                BuyerInfoViewController* vc = [[BuyerInfoViewController alloc]init];
                [vc.inquiryInfoVM setCurrentModel:anno.mapModel];
                [self.navigationController pushViewController:vc animated:YES];
            }
        }
    }

}



-(void)dealloc{
    [self.mapView removeAnnotations:self.mapView.annotations];
    NSLog(@"----------- %s",__func__);
}


@end
